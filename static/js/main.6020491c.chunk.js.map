{"version":3,"sources":["../../src/index.js","App.js","serviceWorker.js","index.js"],"names":["OBSERVED_ATTRIBUTES","ScrollY","dark","children","useState","scrollbarWidth","setScrollbarWidth","rootRef","useRef","scrollingTimeout","scrollContainerRef","scrollbarRef","isDraggingScrollbar","initialScrollTop","initialScrollbarY","scrollbarScale","useEffect","prevValues","mouseDown","event","preventDefault","scroller","current","clientY","scrollTop","rootNode","dataset","moving","mouseUp","mouseMove","scrollbar","animationLoop","scrollContainer","newValues","scrollHeight","offsetHeight","some","key","clearTimeout","scrolling","setTimeout","offset","scale","style","transform","Array","from","forEach","e","hidden","requestAnimationFrame","window","addEventListener","cancelAnimationFrame","removeEventListener","useLayoutEffect","width","offsetWidth","clientWidth","React.createElement","className","ref","right","paddingRight","LoremIpsum","count","fill","map","l","i","NativeScroll","App","defaultValue","isDark","toggleDark","document","documentElement","classList","add","remove","v","useDarkMode","useNativeScroll","toggleNativeScroll","dropdownOpen","toggleDropDown","setCount","Component","type","onClick","min","max","value","onChange","Number","parseInt","target","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6020491c.chunk.js","sourcesContent":["import './index.scss';\nimport * as React from 'react';\nimport { useState, useLayoutEffect, useEffect, useRef } from 'react';\n\nconst GUTTER_WIDTH = 40;\nconst OBSERVED_ATTRIBUTES = ['scrollTop', 'scrollHeight', 'offsetTop'];\n\nexport function ScrollY({ dark, children }) {\n  const [scrollbarWidth, setScrollbarWidth] = useState(0);\n\n  // We store a reference to the top level node to set data attributes\n  // We use these data attributes to style the scrollbar\n  // - scrolling: the element is scrolling (with a 100ms timeout using scrollingTimeout)\n  // - hidden: the element has no scrollbar\n  // - moving: the element is being dragged\n  const rootRef = useRef(null);\n  const scrollingTimeout = useRef(null);\n\n  // This stores a reference to the inner div that we measure\n  const scrollContainerRef = useRef(null);\n\n  // This stores a reference to the scrollbar itself\n  const scrollbarRef = useRef(null);\n\n  // Are we currently dragging the scrollbar\n  const isDraggingScrollbar = useRef(false);\n\n  // Initial scrollTop when we started dragging\n  const initialScrollTop = useRef(0);\n\n  // Initial scrollbar position\n  const initialScrollbarY = useRef(0);\n  let scrollbarScale = useRef(1);\n\n  useEffect(() => {\n    let animationId = null;\n\n    // Previously measured values of OBSERVED_ATTRIBUTES\n    let prevValues = {};\n\n    // measure every frame\n    // This is the only reliable way to check for scrollHeight changes\n    const animationLoop = () => {\n      const rootNode = rootRef.current;\n      const scrollContainer = scrollContainerRef.current;\n      const scrollbar = scrollbarRef.current;\n\n      if (scrollContainer != null) {\n        const newValues = {};\n\n        // Measure from DOM\n        newValues.scrollTop = scrollContainer.scrollTop;\n        newValues.scrollHeight = scrollContainer.scrollHeight;\n        newValues.offsetHeight = scrollContainer.offsetHeight;\n\n        // Check if any value has changed\n        if (OBSERVED_ATTRIBUTES.some(key => newValues[key] !== prevValues[key])) {\n          if (scrollingTimeout.current != null) {\n            clearTimeout(scrollingTimeout.current);\n          }\n          if (rootNode != null) {\n            rootNode.dataset.scrolling = true;\n          }\n          scrollingTimeout.current = setTimeout(() => {\n            const rootNode = rootRef.current;\n            if (rootNode != null) {\n              delete rootNode.dataset.scrolling;\n            }\n          }, 100);\n          prevValues = newValues;\n        }\n\n        const { scrollTop, scrollHeight, offsetHeight } = newValues;\n\n        const offset = (100 * scrollTop) / scrollHeight;\n        const scale = offsetHeight / scrollHeight;\n        scrollbarScale.current = scale;\n\n        // Draw the new scrollbar\n        if (scrollbar != null) {\n          scrollbar.style.transform = `translateY(${offset}%) scaleY(${scale})`;\n          Array.from(scrollbar.children).forEach(e => (e.style.transform = `scaleY(${1 / scale})`));\n        }\n\n        // Show or hide the scrollbar depending on scale\n        if (rootNode != null) {\n          if (scale < 1) {\n            delete rootNode.dataset.hidden;\n          } else {\n            rootNode.dataset.hidden = true;\n          }\n        }\n      }\n      requestAnimationFrame(animationLoop);\n    };\n\n    const mouseDown = event => {\n      // Prevent click events from bubbling up and closing modals for instance\n      event.preventDefault();\n      const scroller = scrollContainerRef.current;\n      if (scroller != null) {\n        isDraggingScrollbar.current = true;\n        initialScrollbarY.current = event.clientY;\n        initialScrollTop.current = scroller.scrollTop;\n      }\n      const rootNode = rootRef.current;\n      if (rootNode != null) {\n        rootNode.dataset.moving = true;\n      }\n    };\n\n    const mouseUp = () => {\n      if (!isDraggingScrollbar.current) {\n        return;\n      }\n      isDraggingScrollbar.current = false;\n      const rootNode = rootRef.current;\n      if (rootNode != null) {\n        delete rootNode.dataset.moving;\n      }\n    };\n\n    const mouseMove = event => {\n      if (!isDraggingScrollbar.current) {\n        return;\n      }\n      const scroller = scrollContainerRef.current;\n      if (scroller != null) {\n        const diff = (event.clientY - initialScrollbarY.current) / scrollbarScale.current;\n        scroller.scrollTop = initialScrollTop.current + diff;\n      }\n    };\n\n    const scrollbar = scrollbarRef.current;\n    animationLoop();\n    window.addEventListener('mouseup', mouseUp);\n    window.addEventListener('mousemove', mouseMove);\n    scrollbar.addEventListener('mousedown', mouseDown);\n    return () => {\n      // Cancel the animationLoop\n      window.cancelAnimationFrame(animationId);\n      window.removeEventListener('mouseup', mouseUp);\n      window.removeEventListener('mousemove', mouseMove);\n      scrollbar.removeEventListener('mousedown', mouseDown);\n    };\n  }, []);\n\n  useLayoutEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n\n    if (scrollContainer != null) {\n      const width = scrollContainer.offsetWidth - scrollContainer.clientWidth;\n      setScrollbarWidth(_w => width);\n    }\n  }, []);\n\n  return (\n    <div className={`scroll-y ${dark ? 'dark' : ''}`} ref={rootRef}>\n      <div\n        ref={scrollContainerRef}\n        className=\"scroll-y__scrollbar-hider\"\n        style={{\n          // Hide scrollbar outside of viewport\n          right: -GUTTER_WIDTH,\n          paddingRight: GUTTER_WIDTH - scrollbarWidth,\n        }}\n      >\n        {children}\n      </div>\n      <div className=\"scroll-y__scrollbar-container\">\n        <div ref={scrollbarRef} className=\"scroll-y__scrollbar\">\n          <div className=\"scroll-y__scrollbar__top\" />\n          <div className=\"scroll-y__scrollbar__bottom\" />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import '@clustree/scroll/lib/index.css';\nimport './App.css';\n\nimport React, { useState, useLayoutEffect } from 'react';\nimport { ScrollY } from '@clustree/scroll';\nimport { Number } from 'core-js';\n\nfunction useDarkMode(defaultValue = false) {\n  const [isDark, toggleDark] = useState(defaultValue);\n\n  useLayoutEffect(() => {\n    if (isDark) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  }, [isDark]);\n\n  return [isDark, () => toggleDark(v => !v)];\n}\n\nconst LOREM = `Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.`;\n\nfunction LoremIpsum({ count }) {\n  return (\n    <>\n      {new Array(count).fill(LOREM).map((l, i) => (\n        <p key={i}>{l}</p>\n      ))}\n    </>\n  );\n}\n\nfunction NativeScroll({ children }) {\n  return <div className=\"nativeScroll\">{children}</div>;\n}\n\nfunction App() {\n  const [isDark, toggleDark] = useDarkMode(true);\n  const [useNativeScroll, toggleNativeScroll] = useState(true);\n  const [dropdownOpen, toggleDropDown] = useState(false);\n  const [count, setCount] = useState(5);\n\n  const Component = useNativeScroll ? NativeScroll : ScrollY;\n  return (\n    <div className=\"App\">\n      <h1>@clustree/scroll</h1>\n\n      <div className=\"main\">\n        <div>\n          <p>\n            <code>{'<ScrollY />'}</code> is a custom scrollbar with a transparent track.\n          </p>\n          <p>\n            It takes one boolean prop: <code>dark</code> that determines if the scrollbar thumb is dark or light.\n          </p>\n          <p>\n            This allows one to have consistent scrollbar styling across many browsers and OSes, including Internet\n            Explorer 11.\n          </p>\n          <button type=\"button\" onClick={toggleDark}>\n            Toggle Dark mode\n          </button>\n        </div>\n        <div>\n          <h3>Demo:</h3>\n          <h4>\n            {useNativeScroll ? 'Using native scrollbars' : 'Using <ScrollY />'}{' '}\n            <button type=\"button\" onClick={() => toggleNativeScroll(v => !v)}>\n              {!useNativeScroll ? 'Use native scrollbars' : 'Use <ScrollY />'}{' '}\n            </button>\n          </h4>\n\n          <label>\n            Number of paragraphs:{` `}\n            <input\n              type=\"range\"\n              min=\"1\"\n              max=\"10\"\n              value={count}\n              onChange={e => setCount(Number.parseInt(e.target.value, 10))}\n            />\n            {` ${count}`}\n          </label>\n\n          <div className=\"demo\">\n            <Component dark={!isDark}>\n              <div className=\"inner\">\n                <LoremIpsum count={count} />\n                <div className=\"relative\">\n                  <button onClick={() => toggleDropDown(v => !v)}>Toggle absolutely positionned content</button>\n                  {dropdownOpen ? (\n                    <div className=\"absolute\">\n                      Absolute content that overflows affects total height for the scrollbar\n                    </div>\n                  ) : null}\n                </div>\n              </div>\n            </Component>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}