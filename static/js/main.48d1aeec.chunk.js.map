{"version":3,"sources":["../../lib/index.esm.js","App.js","serviceWorker.js","index.js"],"names":["_slicedToArray","arr","i","Array","isArray","_arrayWithHoles","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","push","value","length","err","_iterableToArrayLimit","TypeError","_nonIterableRest","GUTTER_WIDTH","OBSERVED_ATTRIBUTES","ScrollY","_ref","dark","children","_useState2","Object","react","scrollbarWidth","setScrollbarWidth","rootRef","scrollingTimeout","scrollContainerRef","scrollbarRef","isDraggingScrollbar","initialScrollTop","initialScrollbarY","scrollbarScale","prevValues","mouseDown","event","preventDefault","scroller","current","clientY","scrollTop","rootNode","dataset","moving","mouseUp","mouseMove","diff","scrollbar","animationLoop","scrollContainer","newValues","scrollHeight","offsetHeight","some","key","clearTimeout","scrolling","setTimeout","offset","scale","style","transform","concat","from","forEach","e","hidden","requestAnimationFrame","window","addEventListener","cancelAnimationFrame","removeEventListener","width","offsetWidth","clientWidth","_w","react_default","a","createElement","className","ref","right","paddingRight","LOREM","LoremIpsum","count","Fragment","fill","map","l","NativeScroll","_ref2","App","_useDarkMode","defaultValue","arguments","_useState","useState","slicedToArray","isDark","toggleDark","useLayoutEffect","document","documentElement","classList","add","remove","v","useDarkMode","_useDarkMode2","_useState3","_useState4","useNativeScroll","toggleNativeScroll","_useState5","_useState6","dropdownOpen","toggleDropDown","_useState7","_useState8","setCount","Component","type","onClick","min","max","onChange","Number","parseInt","target","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.48d1aeec.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect, useLayoutEffect } from 'react';\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nvar GUTTER_WIDTH = 40;\nvar OBSERVED_ATTRIBUTES = ['scrollTop', 'scrollHeight', 'offsetTop'];\n\nfunction ScrollY(_ref) {\n  var dark = _ref.dark,\n      children = _ref.children;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      scrollbarWidth = _useState2[0],\n      setScrollbarWidth = _useState2[1]; // We store a reference to the top level node to set data attributes\n  // We use these data attributes to style the scrollbar\n  // - scrolling: the element is scrolling (with a 100ms timeout using scrollingTimeout)\n  // - hidden: the element has no scrollbar\n  // - moving: the element is being dragged\n\n\n  var rootRef = useRef(null);\n  var scrollingTimeout = useRef(null); // This stores a reference to the inner div that we measure\n\n  var scrollContainerRef = useRef(null); // This stores a reference to the scrollbar itself\n\n  var scrollbarRef = useRef(null); // Are we currently dragging the scrollbar\n\n  var isDraggingScrollbar = useRef(false); // Initial scrollTop when we started dragging\n\n  var initialScrollTop = useRef(0); // Initial scrollbar position\n\n  var initialScrollbarY = useRef(0);\n  var scrollbarScale = useRef(1);\n  useEffect(function () {\n    var animationId = null; // Previously measured values of OBSERVED_ATTRIBUTES\n\n    var prevValues = {}; // measure every frame\n    // This is the only reliable way to check for scrollHeight changes\n\n    var animationLoop = function animationLoop() {\n      var rootNode = rootRef.current;\n      var scrollContainer = scrollContainerRef.current;\n      var scrollbar = scrollbarRef.current;\n\n      if (scrollContainer != null) {\n        var newValues = {}; // Measure from DOM\n\n        newValues.scrollTop = scrollContainer.scrollTop;\n        newValues.scrollHeight = scrollContainer.scrollHeight;\n        newValues.offsetHeight = scrollContainer.offsetHeight; // Check if any value has changed\n\n        if (OBSERVED_ATTRIBUTES.some(function (key) {\n          return newValues[key] !== prevValues[key];\n        })) {\n          if (scrollingTimeout.current != null) {\n            clearTimeout(scrollingTimeout.current);\n          }\n\n          if (rootNode != null) {\n            rootNode.dataset.scrolling = true;\n          }\n\n          scrollingTimeout.current = setTimeout(function () {\n            var rootNode = rootRef.current;\n\n            if (rootNode != null) {\n              delete rootNode.dataset.scrolling;\n            }\n          }, 100);\n          prevValues = newValues;\n        }\n\n        var scrollTop = newValues.scrollTop,\n            scrollHeight = newValues.scrollHeight,\n            offsetHeight = newValues.offsetHeight;\n        var offset = 100 * scrollTop / scrollHeight;\n        var scale = offsetHeight / scrollHeight;\n        scrollbarScale.current = scale; // Draw the new scrollbar\n\n        if (scrollbar != null) {\n          scrollbar.style.transform = \"translateY(\".concat(offset, \"%) scaleY(\").concat(scale, \")\");\n          Array.from(scrollbar.children).forEach(function (e) {\n            return e.style.transform = \"scaleY(\".concat(1 / scale, \")\");\n          });\n        } // Show or hide the scrollbar depending on scale\n\n\n        if (rootNode != null) {\n          if (scale < 1) {\n            delete rootNode.dataset.hidden;\n          } else {\n            rootNode.dataset.hidden = true;\n          }\n        }\n      }\n\n      requestAnimationFrame(animationLoop);\n    };\n\n    var mouseDown = function mouseDown(event) {\n      // Prevent click events from bubbling up and closing modals for instance\n      event.preventDefault();\n      var scroller = scrollContainerRef.current;\n\n      if (scroller != null) {\n        isDraggingScrollbar.current = true;\n        initialScrollbarY.current = event.clientY;\n        initialScrollTop.current = scroller.scrollTop;\n      }\n\n      var rootNode = rootRef.current;\n\n      if (rootNode != null) {\n        rootNode.dataset.moving = true;\n      }\n    };\n\n    var mouseUp = function mouseUp() {\n      if (!isDraggingScrollbar.current) {\n        return;\n      }\n\n      isDraggingScrollbar.current = false;\n      var rootNode = rootRef.current;\n\n      if (rootNode != null) {\n        delete rootNode.dataset.moving;\n      }\n    };\n\n    var mouseMove = function mouseMove(event) {\n      if (!isDraggingScrollbar.current) {\n        return;\n      }\n\n      var scroller = scrollContainerRef.current;\n\n      if (scroller != null) {\n        var diff = (event.clientY - initialScrollbarY.current) / scrollbarScale.current;\n        scroller.scrollTop = initialScrollTop.current + diff;\n      }\n    };\n\n    var scrollbar = scrollbarRef.current;\n    animationLoop();\n    window.addEventListener('mouseup', mouseUp);\n    window.addEventListener('mousemove', mouseMove);\n    scrollbar.addEventListener('mousedown', mouseDown);\n    return function () {\n      // Cancel the animationLoop\n      window.cancelAnimationFrame(animationId);\n      window.removeEventListener('mouseup', mouseUp);\n      window.removeEventListener('mousemove', mouseMove);\n      scrollbar.removeEventListener('mousedown', mouseDown);\n    };\n  }, []);\n  useLayoutEffect(function () {\n    var scrollContainer = scrollContainerRef.current;\n\n    if (scrollContainer != null) {\n      var width = scrollContainer.offsetWidth - scrollContainer.clientWidth;\n      setScrollbarWidth(function (_w) {\n        return width;\n      });\n    }\n  }, []);\n  return React.createElement(\"div\", {\n    className: \"scroll-y \".concat(dark ? 'dark' : ''),\n    ref: rootRef\n  }, React.createElement(\"div\", {\n    ref: scrollContainerRef,\n    className: \"scroll-y__scrollbar-hider\",\n    style: {\n      // Hide scrollbar outside of viewport\n      right: -GUTTER_WIDTH,\n      paddingRight: GUTTER_WIDTH - scrollbarWidth\n    }\n  }, children), React.createElement(\"div\", {\n    className: \"scroll-y__scrollbar-container\"\n  }, React.createElement(\"div\", {\n    ref: scrollbarRef,\n    className: \"scroll-y__scrollbar\"\n  }, React.createElement(\"div\", {\n    className: \"scroll-y__scrollbar__top\"\n  }), React.createElement(\"div\", {\n    className: \"scroll-y__scrollbar__bottom\"\n  }))));\n}\n\nexport { ScrollY };","import '@clustree/scroll/lib/index.css';\nimport './App.css';\n\nimport React, { useState, useLayoutEffect } from 'react';\nimport { ScrollY } from '@clustree/scroll';\nimport { Number } from 'core-js';\n\nfunction useDarkMode(defaultValue = false) {\n  const [isDark, toggleDark] = useState(defaultValue);\n\n  useLayoutEffect(() => {\n    if (isDark) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  }, [isDark]);\n\n  return [isDark, () => toggleDark(v => !v)];\n}\n\nconst LOREM = `Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.`;\n\nfunction LoremIpsum({ count }) {\n  return (\n    <>\n      {new Array(count).fill(LOREM).map((l, i) => (\n        <p key={i}>{l}</p>\n      ))}\n    </>\n  );\n}\n\nfunction NativeScroll({ children }) {\n  return <div className=\"nativeScroll\">{children}</div>;\n}\n\nfunction App() {\n  const [isDark, toggleDark] = useDarkMode(true);\n  const [useNativeScroll, toggleNativeScroll] = useState(true);\n  const [dropdownOpen, toggleDropDown] = useState(false);\n  const [count, setCount] = useState(5);\n\n  const Component = useNativeScroll ? NativeScroll : ScrollY;\n  return (\n    <div className=\"App\">\n      <h1>@clustree/scroll</h1>\n\n      <div className=\"main\">\n        <div>\n          <p>\n            <code>{'<ScrollY />'}</code> is a custom scrollbar with a transparent track.\n          </p>\n          <p>\n            It takes one boolean prop: <code>dark</code> that determines if the scrollbar thumb is dark or light.\n          </p>\n          <p>\n            This allows one to have consistent scrollbar styling across many browsers and OSes, including Internet\n            Explorer 11.\n          </p>\n          <button type=\"button\" onClick={toggleDark}>\n            Toggle Dark mode\n          </button>\n        </div>\n        <div>\n          <h3>Demo:</h3>\n          <h4>\n            {useNativeScroll ? 'Using native scrollbars' : 'Using <ScrollY />'}{' '}\n            <button type=\"button\" onClick={() => toggleNativeScroll(v => !v)}>\n              {!useNativeScroll ? 'Use native scrollbars' : 'Use <ScrollY />'}{' '}\n            </button>\n          </h4>\n\n          <label>\n            Number of paragraphs:{` `}\n            <input\n              type=\"range\"\n              min=\"1\"\n              max=\"10\"\n              value={count}\n              onChange={e => setCount(Number.parseInt(e.target.value, 10))}\n            />\n            {` ${count}`}\n          </label>\n\n          <div className=\"demo\">\n            <Component dark={!isDark}>\n              <div className=\"inner\">\n                <LoremIpsum count={count} />\n                <div className=\"relative\">\n                  <button onClick={() => toggleDropDown(v => !v)}>Toggle absolutely positionned content</button>\n                  {dropdownOpen ? (\n                    <div className=\"absolute\">\n                      Absolute content that overflows affects total height for the scrollbar\n                    </div>\n                  ) : null}\n                </div>\n              </div>\n            </Component>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}